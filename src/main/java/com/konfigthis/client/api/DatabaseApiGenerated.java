/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DatabaseCreateNewDatabaseRequest;
import com.konfigthis.client.model.DatabaseExecuteQueryRequest;
import com.konfigthis.client.model.DatabaseExecuteQueryResponse;
import com.konfigthis.client.model.DatabaseGetDatabaseResponse;
import com.konfigthis.client.model.DatabaseUpdateDatabaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DatabaseApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabaseApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDatabaseCall(String notionVersion, DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseCreateNewDatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDatabaseValidateBeforeCall(String notionVersion, DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling createNewDatabase(Async)");
        }

        return createNewDatabaseCall(notionVersion, databaseCreateNewDatabaseRequest, _callback);

    }


    private ApiResponse<String> createNewDatabaseWithHttpInfo(String notionVersion, DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDatabaseValidateBeforeCall(notionVersion, databaseCreateNewDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDatabaseAsync(String notionVersion, DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDatabaseValidateBeforeCall(notionVersion, databaseCreateNewDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDatabaseRequestBuilder {
        private final String parent;
        private final String properties;
        private final String notionVersion;
        private List title;

        private CreateNewDatabaseRequestBuilder(String parent, String properties, String notionVersion) {
            this.parent = parent;
            this.properties = properties;
            this.notionVersion = notionVersion;
        }

        /**
         * Set title
         * @param title Title of database as it appears in Notion. An array of [rich text objects](ref:rich-text). (optional)
         * @return CreateNewDatabaseRequestBuilder
         */
        public CreateNewDatabaseRequestBuilder title(List title) {
            this.title = title;
            return this;
        }
        
        /**
         * Build call for createNewDatabase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest = buildBodyParams();
            return createNewDatabaseCall(notionVersion, databaseCreateNewDatabaseRequest, _callback);
        }

        private DatabaseCreateNewDatabaseRequest buildBodyParams() {
            DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest = new DatabaseCreateNewDatabaseRequest();
            databaseCreateNewDatabaseRequest.title(this.title);
            databaseCreateNewDatabaseRequest.parent(this.parent);
            databaseCreateNewDatabaseRequest.properties(this.properties);
            return databaseCreateNewDatabaseRequest;
        }

        /**
         * Execute createNewDatabase request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest = buildBodyParams();
            ApiResponse<String> localVarResp = createNewDatabaseWithHttpInfo(notionVersion, databaseCreateNewDatabaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDatabase request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest = buildBodyParams();
            return createNewDatabaseWithHttpInfo(notionVersion, databaseCreateNewDatabaseRequest);
        }

        /**
         * Execute createNewDatabase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            DatabaseCreateNewDatabaseRequest databaseCreateNewDatabaseRequest = buildBodyParams();
            return createNewDatabaseAsync(notionVersion, databaseCreateNewDatabaseRequest, _callback);
        }
    }

    /**
     * Create a database
     * 
     * @param notionVersion  (required)
     * @return CreateNewDatabaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDatabaseRequestBuilder createNewDatabase(String parent, String properties, String notionVersion) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
            

        if (properties == null) throw new IllegalArgumentException("\"properties\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new CreateNewDatabaseRequestBuilder(parent, properties, notionVersion);
    }
    private okhttp3.Call executeQueryCall(String databaseId, String notionVersion, String filterProperties, DatabaseExecuteQueryRequest databaseExecuteQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseExecuteQueryRequest;

        // create path and map variables
        String localVarPath = "/v1/databases/{database_id}/query"
            .replace("{" + "database_id" + "}", localVarApiClient.escapeString(databaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterProperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_properties", filterProperties));
        }

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeQueryValidateBeforeCall(String databaseId, String notionVersion, String filterProperties, DatabaseExecuteQueryRequest databaseExecuteQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling executeQuery(Async)");
        }

        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling executeQuery(Async)");
        }

        return executeQueryCall(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest, _callback);

    }


    private ApiResponse<DatabaseExecuteQueryResponse> executeQueryWithHttpInfo(String databaseId, String notionVersion, String filterProperties, DatabaseExecuteQueryRequest databaseExecuteQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = executeQueryValidateBeforeCall(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest, null);
        Type localVarReturnType = new TypeToken<DatabaseExecuteQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call executeQueryAsync(String databaseId, String notionVersion, String filterProperties, DatabaseExecuteQueryRequest databaseExecuteQueryRequest, final ApiCallback<DatabaseExecuteQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeQueryValidateBeforeCall(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest, _callback);
        Type localVarReturnType = new TypeToken<DatabaseExecuteQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExecuteQueryRequestBuilder {
        private final String databaseId;
        private final String notionVersion;
        private String filter;
        private List sorts;
        private String startCursor;
        private Integer pageSize;
        private String filterProperties;

        private ExecuteQueryRequestBuilder(String databaseId, String notionVersion) {
            this.databaseId = databaseId;
            this.notionVersion = notionVersion;
        }

        /**
         * Set filter
         * @param filter When supplied, limits which pages are returned based on the [filter conditions](ref:post-database-query-filter). (optional)
         * @return ExecuteQueryRequestBuilder
         */
        public ExecuteQueryRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set sorts
         * @param sorts When supplied, orders the results based on the provided [sort criteria](ref:post-database-query-sort). (optional)
         * @return ExecuteQueryRequestBuilder
         */
        public ExecuteQueryRequestBuilder sorts(List sorts) {
            this.sorts = sorts;
            return this;
        }
        
        /**
         * Set startCursor
         * @param startCursor When supplied, returns a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results. (optional)
         * @return ExecuteQueryRequestBuilder
         */
        public ExecuteQueryRequestBuilder startCursor(String startCursor) {
            this.startCursor = startCursor;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of items from the full list desired in the response. Maximum: 100 (optional, default to 100)
         * @return ExecuteQueryRequestBuilder
         */
        public ExecuteQueryRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set filterProperties
         * @param filterProperties A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the &#x60;filter&#x60; criteria. (optional)
         * @return ExecuteQueryRequestBuilder
         */
        public ExecuteQueryRequestBuilder filterProperties(String filterProperties) {
            this.filterProperties = filterProperties;
            return this;
        }
        
        /**
         * Build call for executeQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DatabaseExecuteQueryRequest databaseExecuteQueryRequest = buildBodyParams();
            return executeQueryCall(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest, _callback);
        }

        private DatabaseExecuteQueryRequest buildBodyParams() {
            DatabaseExecuteQueryRequest databaseExecuteQueryRequest = new DatabaseExecuteQueryRequest();
            databaseExecuteQueryRequest.filter(this.filter);
            databaseExecuteQueryRequest.sorts(this.sorts);
            databaseExecuteQueryRequest.startCursor(this.startCursor);
            databaseExecuteQueryRequest.pageSize(this.pageSize);
            return databaseExecuteQueryRequest;
        }

        /**
         * Execute executeQuery request
         * @return DatabaseExecuteQueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DatabaseExecuteQueryResponse execute() throws ApiException {
            DatabaseExecuteQueryRequest databaseExecuteQueryRequest = buildBodyParams();
            ApiResponse<DatabaseExecuteQueryResponse> localVarResp = executeQueryWithHttpInfo(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute executeQuery request with HTTP info returned
         * @return ApiResponse&lt;DatabaseExecuteQueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatabaseExecuteQueryResponse> executeWithHttpInfo() throws ApiException {
            DatabaseExecuteQueryRequest databaseExecuteQueryRequest = buildBodyParams();
            return executeQueryWithHttpInfo(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest);
        }

        /**
         * Execute executeQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatabaseExecuteQueryResponse> _callback) throws ApiException {
            DatabaseExecuteQueryRequest databaseExecuteQueryRequest = buildBodyParams();
            return executeQueryAsync(databaseId, notionVersion, filterProperties, databaseExecuteQueryRequest, _callback);
        }
    }

    /**
     * Query a database
     * 
     * @param databaseId Identifier for a Notion database. (required)
     * @param notionVersion  (required)
     * @return ExecuteQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteQueryRequestBuilder executeQuery(String databaseId, String notionVersion) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new ExecuteQueryRequestBuilder(databaseId, notionVersion);
    }
    private okhttp3.Call getDatabaseCall(String databaseId, String notionVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/databases/{database_id}"
            .replace("{" + "database_id" + "}", localVarApiClient.escapeString(databaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatabaseValidateBeforeCall(String databaseId, String notionVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling getDatabase(Async)");
        }

        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling getDatabase(Async)");
        }

        return getDatabaseCall(databaseId, notionVersion, _callback);

    }


    private ApiResponse<DatabaseGetDatabaseResponse> getDatabaseWithHttpInfo(String databaseId, String notionVersion) throws ApiException {
        okhttp3.Call localVarCall = getDatabaseValidateBeforeCall(databaseId, notionVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseGetDatabaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDatabaseAsync(String databaseId, String notionVersion, final ApiCallback<DatabaseGetDatabaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatabaseValidateBeforeCall(databaseId, notionVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseGetDatabaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDatabaseRequestBuilder {
        private final String databaseId;
        private final String notionVersion;

        private GetDatabaseRequestBuilder(String databaseId, String notionVersion) {
            this.databaseId = databaseId;
            this.notionVersion = notionVersion;
        }

        /**
         * Build call for getDatabase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDatabaseCall(databaseId, notionVersion, _callback);
        }


        /**
         * Execute getDatabase request
         * @return DatabaseGetDatabaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DatabaseGetDatabaseResponse execute() throws ApiException {
            ApiResponse<DatabaseGetDatabaseResponse> localVarResp = getDatabaseWithHttpInfo(databaseId, notionVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDatabase request with HTTP info returned
         * @return ApiResponse&lt;DatabaseGetDatabaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatabaseGetDatabaseResponse> executeWithHttpInfo() throws ApiException {
            return getDatabaseWithHttpInfo(databaseId, notionVersion);
        }

        /**
         * Execute getDatabase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatabaseGetDatabaseResponse> _callback) throws ApiException {
            return getDatabaseAsync(databaseId, notionVersion, _callback);
        }
    }

    /**
     * Retrieve a database
     * 
     * @param databaseId An identifier for the Notion database. (required)
     * @param notionVersion  (required)
     * @return GetDatabaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDatabaseRequestBuilder getDatabase(String databaseId, String notionVersion) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new GetDatabaseRequestBuilder(databaseId, notionVersion);
    }
    private okhttp3.Call updateDatabaseCall(String databaseId, String notionVersion, DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseUpdateDatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases/{database_id}"
            .replace("{" + "database_id" + "}", localVarApiClient.escapeString(databaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatabaseValidateBeforeCall(String databaseId, String notionVersion, DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseId' is set
        if (databaseId == null) {
            throw new ApiException("Missing the required parameter 'databaseId' when calling updateDatabase(Async)");
        }

        return updateDatabaseCall(databaseId, notionVersion, databaseUpdateDatabaseRequest, _callback);

    }


    private ApiResponse<String> updateDatabaseWithHttpInfo(String databaseId, String notionVersion, DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDatabaseValidateBeforeCall(databaseId, notionVersion, databaseUpdateDatabaseRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDatabaseAsync(String databaseId, String notionVersion, DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatabaseValidateBeforeCall(databaseId, notionVersion, databaseUpdateDatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDatabaseRequestBuilder {
        private final String databaseId;
        private List title;
        private List description;
        private String properties;
        private String notionVersion;

        private UpdateDatabaseRequestBuilder(String databaseId) {
            this.databaseId = databaseId;
        }

        /**
         * Set title
         * @param title An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the title of the database that is displayed in the Notion UI. If omitted, then the database title remains unchanged. (optional)
         * @return UpdateDatabaseRequestBuilder
         */
        public UpdateDatabaseRequestBuilder title(List title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the description of the database that is displayed in the Notion UI. If omitted, then the database description remains unchanged. (optional)
         * @return UpdateDatabaseRequestBuilder
         */
        public UpdateDatabaseRequestBuilder description(List description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set properties
         * @param properties The properties of a database to be changed in the request, in the form of a JSON object. If updating an existing property, then the keys are the names or IDs of the properties as they appear in Notion, and the values are [property schema objects](ref:property-schema-object). If adding a new property, then the key is the name of the new database property and the value is a [property schema object](ref:property-schema-object). (optional)
         * @return UpdateDatabaseRequestBuilder
         */
        public UpdateDatabaseRequestBuilder properties(String properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set notionVersion
         * @param notionVersion  (optional, default to 2022-06-28)
         * @return UpdateDatabaseRequestBuilder
         */
        public UpdateDatabaseRequestBuilder notionVersion(String notionVersion) {
            this.notionVersion = notionVersion;
            return this;
        }
        
        /**
         * Build call for updateDatabase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest = buildBodyParams();
            return updateDatabaseCall(databaseId, notionVersion, databaseUpdateDatabaseRequest, _callback);
        }

        private DatabaseUpdateDatabaseRequest buildBodyParams() {
            DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest = new DatabaseUpdateDatabaseRequest();
            databaseUpdateDatabaseRequest.title(this.title);
            databaseUpdateDatabaseRequest.description(this.description);
            databaseUpdateDatabaseRequest.properties(this.properties);
            return databaseUpdateDatabaseRequest;
        }

        /**
         * Execute updateDatabase request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updateDatabaseWithHttpInfo(databaseId, notionVersion, databaseUpdateDatabaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDatabase request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest = buildBodyParams();
            return updateDatabaseWithHttpInfo(databaseId, notionVersion, databaseUpdateDatabaseRequest);
        }

        /**
         * Execute updateDatabase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            DatabaseUpdateDatabaseRequest databaseUpdateDatabaseRequest = buildBodyParams();
            return updateDatabaseAsync(databaseId, notionVersion, databaseUpdateDatabaseRequest, _callback);
        }
    }

    /**
     * Update a database
     * 
     * @param databaseId identifier for a Notion database (required)
     * @return UpdateDatabaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDatabaseRequestBuilder updateDatabase(String databaseId) throws IllegalArgumentException {
        if (databaseId == null) throw new IllegalArgumentException("\"databaseId\" is required but got null");
            

        return new UpdateDatabaseRequestBuilder(databaseId);
    }
}
