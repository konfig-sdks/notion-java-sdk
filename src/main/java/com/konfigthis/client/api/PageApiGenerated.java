/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PageCreateNewPageRequest;
import com.konfigthis.client.model.PageCreateNewPageResponse;
import com.konfigthis.client.model.PageGetPageResponse;
import com.konfigthis.client.model.PageUpdatePropertiesRequest;
import com.konfigthis.client.model.PageUpdatePropertiesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPageCall(String notionVersion, PageCreateNewPageRequest pageCreateNewPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageCreateNewPageRequest;

        // create path and map variables
        String localVarPath = "/v1/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPageValidateBeforeCall(String notionVersion, PageCreateNewPageRequest pageCreateNewPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling createNewPage(Async)");
        }

        return createNewPageCall(notionVersion, pageCreateNewPageRequest, _callback);

    }


    private ApiResponse<PageCreateNewPageResponse> createNewPageWithHttpInfo(String notionVersion, PageCreateNewPageRequest pageCreateNewPageRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPageValidateBeforeCall(notionVersion, pageCreateNewPageRequest, null);
        Type localVarReturnType = new TypeToken<PageCreateNewPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPageAsync(String notionVersion, PageCreateNewPageRequest pageCreateNewPageRequest, final ApiCallback<PageCreateNewPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPageValidateBeforeCall(notionVersion, pageCreateNewPageRequest, _callback);
        Type localVarReturnType = new TypeToken<PageCreateNewPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPageRequestBuilder {
        private final String parent;
        private final String properties;
        private final String notionVersion;
        private List<String> children;
        private String icon;
        private String cover;

        private CreateNewPageRequestBuilder(String parent, String properties, String notionVersion) {
            this.parent = parent;
            this.properties = properties;
            this.notionVersion = notionVersion;
        }

        /**
         * Set children
         * @param children The content to be rendered on the new page, represented as an array of [block objects](https://developers.notion.com/reference/block). (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder children(List<String> children) {
            this.children = children;
            return this;
        }
        
        /**
         * Set icon
         * @param icon The icon of the new page. Either an [emoji object](https://developers.notion.com/reference/emoji-object) or an [external file object](https://developers.notion.com/reference/file-object).. (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder icon(String icon) {
            this.icon = icon;
            return this;
        }
        
        /**
         * Set cover
         * @param cover The cover image of the new page, represented as a [file object](https://developers.notion.com/reference/file-object). (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder cover(String cover) {
            this.cover = cover;
            return this;
        }
        
        /**
         * Build call for createNewPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PageCreateNewPageRequest pageCreateNewPageRequest = buildBodyParams();
            return createNewPageCall(notionVersion, pageCreateNewPageRequest, _callback);
        }

        private PageCreateNewPageRequest buildBodyParams() {
            PageCreateNewPageRequest pageCreateNewPageRequest = new PageCreateNewPageRequest();
            pageCreateNewPageRequest.parent(this.parent);
            pageCreateNewPageRequest.properties(this.properties);
            pageCreateNewPageRequest.children(this.children);
            pageCreateNewPageRequest.icon(this.icon);
            pageCreateNewPageRequest.cover(this.cover);
            return pageCreateNewPageRequest;
        }

        /**
         * Execute createNewPage request
         * @return PageCreateNewPageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PageCreateNewPageResponse execute() throws ApiException {
            PageCreateNewPageRequest pageCreateNewPageRequest = buildBodyParams();
            ApiResponse<PageCreateNewPageResponse> localVarResp = createNewPageWithHttpInfo(notionVersion, pageCreateNewPageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPage request with HTTP info returned
         * @return ApiResponse&lt;PageCreateNewPageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageCreateNewPageResponse> executeWithHttpInfo() throws ApiException {
            PageCreateNewPageRequest pageCreateNewPageRequest = buildBodyParams();
            return createNewPageWithHttpInfo(notionVersion, pageCreateNewPageRequest);
        }

        /**
         * Execute createNewPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageCreateNewPageResponse> _callback) throws ApiException {
            PageCreateNewPageRequest pageCreateNewPageRequest = buildBodyParams();
            return createNewPageAsync(notionVersion, pageCreateNewPageRequest, _callback);
        }
    }

    /**
     * Create a page
     * 
     * @param notionVersion  (required)
     * @return CreateNewPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPageRequestBuilder createNewPage(String parent, String properties, String notionVersion) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
            

        if (properties == null) throw new IllegalArgumentException("\"properties\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new CreateNewPageRequestBuilder(parent, properties, notionVersion);
    }
    private okhttp3.Call getPageCall(String pageId, String notionVersion, String filterProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterProperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_properties", filterProperties));
        }

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageValidateBeforeCall(String pageId, String notionVersion, String filterProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPage(Async)");
        }

        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling getPage(Async)");
        }

        return getPageCall(pageId, notionVersion, filterProperties, _callback);

    }


    private ApiResponse<PageGetPageResponse> getPageWithHttpInfo(String pageId, String notionVersion, String filterProperties) throws ApiException {
        okhttp3.Call localVarCall = getPageValidateBeforeCall(pageId, notionVersion, filterProperties, null);
        Type localVarReturnType = new TypeToken<PageGetPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPageAsync(String pageId, String notionVersion, String filterProperties, final ApiCallback<PageGetPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageValidateBeforeCall(pageId, notionVersion, filterProperties, _callback);
        Type localVarReturnType = new TypeToken<PageGetPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPageRequestBuilder {
        private final String pageId;
        private final String notionVersion;
        private String filterProperties;

        private GetPageRequestBuilder(String pageId, String notionVersion) {
            this.pageId = pageId;
            this.notionVersion = notionVersion;
        }

        /**
         * Set filterProperties
         * @param filterProperties A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: &#x60;?filter_properties&#x3D;iAk8&amp;filter_properties&#x3D;b7dh&#x60;. (optional)
         * @return GetPageRequestBuilder
         */
        public GetPageRequestBuilder filterProperties(String filterProperties) {
            this.filterProperties = filterProperties;
            return this;
        }
        
        /**
         * Build call for getPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPageCall(pageId, notionVersion, filterProperties, _callback);
        }


        /**
         * Execute getPage request
         * @return PageGetPageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PageGetPageResponse execute() throws ApiException {
            ApiResponse<PageGetPageResponse> localVarResp = getPageWithHttpInfo(pageId, notionVersion, filterProperties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPage request with HTTP info returned
         * @return ApiResponse&lt;PageGetPageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageGetPageResponse> executeWithHttpInfo() throws ApiException {
            return getPageWithHttpInfo(pageId, notionVersion, filterProperties);
        }

        /**
         * Execute getPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageGetPageResponse> _callback) throws ApiException {
            return getPageAsync(pageId, notionVersion, filterProperties, _callback);
        }
    }

    /**
     * Retrieve a page
     * 
     * @param pageId Identifier for a Notion page (required)
     * @param notionVersion  (required)
     * @return GetPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPageRequestBuilder getPage(String pageId, String notionVersion) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new GetPageRequestBuilder(pageId, notionVersion);
    }
    private okhttp3.Call getPropertyItemCall(String pageId, String propertyId, Integer pageSize, String startCursor, String notionVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pages/{page_id}/properties/{property_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()))
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_cursor", startCursor));
        }

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyItemValidateBeforeCall(String pageId, String propertyId, Integer pageSize, String startCursor, String notionVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling getPropertyItem(Async)");
        }

        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyItem(Async)");
        }

        return getPropertyItemCall(pageId, propertyId, pageSize, startCursor, notionVersion, _callback);

    }


    private ApiResponse<String> getPropertyItemWithHttpInfo(String pageId, String propertyId, Integer pageSize, String startCursor, String notionVersion) throws ApiException {
        okhttp3.Call localVarCall = getPropertyItemValidateBeforeCall(pageId, propertyId, pageSize, startCursor, notionVersion, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyItemAsync(String pageId, String propertyId, Integer pageSize, String startCursor, String notionVersion, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyItemValidateBeforeCall(pageId, propertyId, pageSize, startCursor, notionVersion, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPropertyItemRequestBuilder {
        private final String pageId;
        private final String propertyId;
        private Integer pageSize;
        private String startCursor;
        private String notionVersion;

        private GetPropertyItemRequestBuilder(String pageId, String propertyId) {
            this.pageId = pageId;
            this.propertyId = propertyId;
        }

        /**
         * Set pageSize
         * @param pageSize For paginated properties. The max number of property item objects on a page. The default size is 100 (optional)
         * @return GetPropertyItemRequestBuilder
         */
        public GetPropertyItemRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set startCursor
         * @param startCursor For paginated properties. (optional)
         * @return GetPropertyItemRequestBuilder
         */
        public GetPropertyItemRequestBuilder startCursor(String startCursor) {
            this.startCursor = startCursor;
            return this;
        }
        
        /**
         * Set notionVersion
         * @param notionVersion  (optional, default to 2022-06-28)
         * @return GetPropertyItemRequestBuilder
         */
        public GetPropertyItemRequestBuilder notionVersion(String notionVersion) {
            this.notionVersion = notionVersion;
            return this;
        }
        
        /**
         * Build call for getPropertyItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyItemCall(pageId, propertyId, pageSize, startCursor, notionVersion, _callback);
        }


        /**
         * Execute getPropertyItem request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getPropertyItemWithHttpInfo(pageId, propertyId, pageSize, startCursor, notionVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPropertyItem request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getPropertyItemWithHttpInfo(pageId, propertyId, pageSize, startCursor, notionVersion);
        }

        /**
         * Execute getPropertyItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getPropertyItemAsync(pageId, propertyId, pageSize, startCursor, notionVersion, _callback);
        }
    }

    /**
     * Retrieve a page property item
     * 
     * @param pageId Identifier for a Notion page (required)
     * @param propertyId Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values) (required)
     * @return GetPropertyItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertyItemRequestBuilder getPropertyItem(String pageId, String propertyId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        if (propertyId == null) throw new IllegalArgumentException("\"propertyId\" is required but got null");
            

        return new GetPropertyItemRequestBuilder(pageId, propertyId);
    }
    private okhttp3.Call updatePropertiesCall(String pageId, String notionVersion, PageUpdatePropertiesRequest pageUpdatePropertiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pageUpdatePropertiesRequest;

        // create path and map variables
        String localVarPath = "/v1/pages/{page_id}"
            .replace("{" + "page_id" + "}", localVarApiClient.escapeString(pageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertiesValidateBeforeCall(String pageId, String notionVersion, PageUpdatePropertiesRequest pageUpdatePropertiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling updateProperties(Async)");
        }

        return updatePropertiesCall(pageId, notionVersion, pageUpdatePropertiesRequest, _callback);

    }


    private ApiResponse<PageUpdatePropertiesResponse> updatePropertiesWithHttpInfo(String pageId, String notionVersion, PageUpdatePropertiesRequest pageUpdatePropertiesRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(pageId, notionVersion, pageUpdatePropertiesRequest, null);
        Type localVarReturnType = new TypeToken<PageUpdatePropertiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePropertiesAsync(String pageId, String notionVersion, PageUpdatePropertiesRequest pageUpdatePropertiesRequest, final ApiCallback<PageUpdatePropertiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(pageId, notionVersion, pageUpdatePropertiesRequest, _callback);
        Type localVarReturnType = new TypeToken<PageUpdatePropertiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePropertiesRequestBuilder {
        private final String pageId;
        private String properties;
        private Boolean archived;
        private String icon;
        private String cover;
        private String notionVersion;

        private UpdatePropertiesRequestBuilder(String pageId) {
            this.pageId = pageId;
        }

        /**
         * Set properties
         * @param properties The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder properties(String properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Whether the page is archived (deleted). Set to true to archive a page. Set to false to un-archive (restore) a page. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set icon
         * @param icon A page icon for the page. Supported types are [external file object](https://developers.notion.com/reference/file-object) or [emoji object](https://developers.notion.com/reference/emoji-object). (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder icon(String icon) {
            this.icon = icon;
            return this;
        }
        
        /**
         * Set cover
         * @param cover A cover image for the page. Only [external file objects](https://developers.notion.com/reference/file-object) are supported. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder cover(String cover) {
            this.cover = cover;
            return this;
        }
        
        /**
         * Set notionVersion
         * @param notionVersion  (optional, default to 2022-06-28)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder notionVersion(String notionVersion) {
            this.notionVersion = notionVersion;
            return this;
        }
        
        /**
         * Build call for updateProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PageUpdatePropertiesRequest pageUpdatePropertiesRequest = buildBodyParams();
            return updatePropertiesCall(pageId, notionVersion, pageUpdatePropertiesRequest, _callback);
        }

        private PageUpdatePropertiesRequest buildBodyParams() {
            PageUpdatePropertiesRequest pageUpdatePropertiesRequest = new PageUpdatePropertiesRequest();
            pageUpdatePropertiesRequest.properties(this.properties);
            pageUpdatePropertiesRequest.archived(this.archived);
            pageUpdatePropertiesRequest.icon(this.icon);
            pageUpdatePropertiesRequest.cover(this.cover);
            return pageUpdatePropertiesRequest;
        }

        /**
         * Execute updateProperties request
         * @return PageUpdatePropertiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PageUpdatePropertiesResponse execute() throws ApiException {
            PageUpdatePropertiesRequest pageUpdatePropertiesRequest = buildBodyParams();
            ApiResponse<PageUpdatePropertiesResponse> localVarResp = updatePropertiesWithHttpInfo(pageId, notionVersion, pageUpdatePropertiesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProperties request with HTTP info returned
         * @return ApiResponse&lt;PageUpdatePropertiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageUpdatePropertiesResponse> executeWithHttpInfo() throws ApiException {
            PageUpdatePropertiesRequest pageUpdatePropertiesRequest = buildBodyParams();
            return updatePropertiesWithHttpInfo(pageId, notionVersion, pageUpdatePropertiesRequest);
        }

        /**
         * Execute updateProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageUpdatePropertiesResponse> _callback) throws ApiException {
            PageUpdatePropertiesRequest pageUpdatePropertiesRequest = buildBodyParams();
            return updatePropertiesAsync(pageId, notionVersion, pageUpdatePropertiesRequest, _callback);
        }
    }

    /**
     * Update page properties
     * 
     * @param pageId The identifier for the Notion page to be updated. (required)
     * @return UpdatePropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePropertiesRequestBuilder updateProperties(String pageId) throws IllegalArgumentException {
        if (pageId == null) throw new IllegalArgumentException("\"pageId\" is required but got null");
            

        return new UpdatePropertiesRequestBuilder(pageId);
    }
}
