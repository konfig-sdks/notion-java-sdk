/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BlockAppendChildrenRequest;
import com.konfigthis.client.model.BlockAppendChildrenResponse;
import com.konfigthis.client.model.BlockGetChildrenResponse;
import com.konfigthis.client.model.BlockGetDetailsResponse;
import com.konfigthis.client.model.BlockRemoveBlockByIdResponse;
import com.konfigthis.client.model.BlockUpdateBlockByIdRequest;
import com.konfigthis.client.model.BlockUpdateBlockByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BlockApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlockApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BlockApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call appendChildrenCall(String blockId, String notionVersion, BlockAppendChildrenRequest blockAppendChildrenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockAppendChildrenRequest;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}/children"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendChildrenValidateBeforeCall(String blockId, String notionVersion, BlockAppendChildrenRequest blockAppendChildrenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling appendChildren(Async)");
        }

        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling appendChildren(Async)");
        }

        return appendChildrenCall(blockId, notionVersion, blockAppendChildrenRequest, _callback);

    }


    private ApiResponse<BlockAppendChildrenResponse> appendChildrenWithHttpInfo(String blockId, String notionVersion, BlockAppendChildrenRequest blockAppendChildrenRequest) throws ApiException {
        okhttp3.Call localVarCall = appendChildrenValidateBeforeCall(blockId, notionVersion, blockAppendChildrenRequest, null);
        Type localVarReturnType = new TypeToken<BlockAppendChildrenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call appendChildrenAsync(String blockId, String notionVersion, BlockAppendChildrenRequest blockAppendChildrenRequest, final ApiCallback<BlockAppendChildrenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendChildrenValidateBeforeCall(blockId, notionVersion, blockAppendChildrenRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockAppendChildrenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AppendChildrenRequestBuilder {
        private final List children;
        private final String blockId;
        private final String notionVersion;
        private String after;

        private AppendChildrenRequestBuilder(List children, String blockId, String notionVersion) {
            this.children = children;
            this.blockId = blockId;
            this.notionVersion = notionVersion;
        }

        /**
         * Set after
         * @param after The ID of the existing block that the new block should be appended after. (optional)
         * @return AppendChildrenRequestBuilder
         */
        public AppendChildrenRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for appendChildren
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BlockAppendChildrenRequest blockAppendChildrenRequest = buildBodyParams();
            return appendChildrenCall(blockId, notionVersion, blockAppendChildrenRequest, _callback);
        }

        private BlockAppendChildrenRequest buildBodyParams() {
            BlockAppendChildrenRequest blockAppendChildrenRequest = new BlockAppendChildrenRequest();
            blockAppendChildrenRequest.children(this.children);
            blockAppendChildrenRequest.after(this.after);
            return blockAppendChildrenRequest;
        }

        /**
         * Execute appendChildren request
         * @return BlockAppendChildrenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BlockAppendChildrenResponse execute() throws ApiException {
            BlockAppendChildrenRequest blockAppendChildrenRequest = buildBodyParams();
            ApiResponse<BlockAppendChildrenResponse> localVarResp = appendChildrenWithHttpInfo(blockId, notionVersion, blockAppendChildrenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute appendChildren request with HTTP info returned
         * @return ApiResponse&lt;BlockAppendChildrenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockAppendChildrenResponse> executeWithHttpInfo() throws ApiException {
            BlockAppendChildrenRequest blockAppendChildrenRequest = buildBodyParams();
            return appendChildrenWithHttpInfo(blockId, notionVersion, blockAppendChildrenRequest);
        }

        /**
         * Execute appendChildren request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockAppendChildrenResponse> _callback) throws ApiException {
            BlockAppendChildrenRequest blockAppendChildrenRequest = buildBodyParams();
            return appendChildrenAsync(blockId, notionVersion, blockAppendChildrenRequest, _callback);
        }
    }

    /**
     * Append block children
     * 
     * @param blockId Identifier for a [block](ref:block). Also accepts a [page](ref:page) ID. (required)
     * @param notionVersion  (required)
     * @return AppendChildrenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AppendChildrenRequestBuilder appendChildren(List children, String blockId, String notionVersion) throws IllegalArgumentException {
        if (children == null) throw new IllegalArgumentException("\"children\" is required but got null");
        if (blockId == null) throw new IllegalArgumentException("\"blockId\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new AppendChildrenRequestBuilder(children, blockId, notionVersion);
    }
    private okhttp3.Call getChildrenCall(String blockId, String notionVersion, String startCursor, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}/children"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_cursor", startCursor));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChildrenValidateBeforeCall(String blockId, String notionVersion, String startCursor, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getChildren(Async)");
        }

        // verify the required parameter 'notionVersion' is set
        if (notionVersion == null) {
            throw new ApiException("Missing the required parameter 'notionVersion' when calling getChildren(Async)");
        }

        return getChildrenCall(blockId, notionVersion, startCursor, pageSize, _callback);

    }


    private ApiResponse<BlockGetChildrenResponse> getChildrenWithHttpInfo(String blockId, String notionVersion, String startCursor, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getChildrenValidateBeforeCall(blockId, notionVersion, startCursor, pageSize, null);
        Type localVarReturnType = new TypeToken<BlockGetChildrenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChildrenAsync(String blockId, String notionVersion, String startCursor, Integer pageSize, final ApiCallback<BlockGetChildrenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChildrenValidateBeforeCall(blockId, notionVersion, startCursor, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BlockGetChildrenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChildrenRequestBuilder {
        private final String blockId;
        private final String notionVersion;
        private String startCursor;
        private Integer pageSize;

        private GetChildrenRequestBuilder(String blockId, String notionVersion) {
            this.blockId = blockId;
            this.notionVersion = notionVersion;
        }

        /**
         * Set startCursor
         * @param startCursor If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results. (optional)
         * @return GetChildrenRequestBuilder
         */
        public GetChildrenRequestBuilder startCursor(String startCursor) {
            this.startCursor = startCursor;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of items from the full list desired in the response. Maximum: 100 (optional, default to 100)
         * @return GetChildrenRequestBuilder
         */
        public GetChildrenRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getChildren
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChildrenCall(blockId, notionVersion, startCursor, pageSize, _callback);
        }


        /**
         * Execute getChildren request
         * @return BlockGetChildrenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BlockGetChildrenResponse execute() throws ApiException {
            ApiResponse<BlockGetChildrenResponse> localVarResp = getChildrenWithHttpInfo(blockId, notionVersion, startCursor, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChildren request with HTTP info returned
         * @return ApiResponse&lt;BlockGetChildrenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockGetChildrenResponse> executeWithHttpInfo() throws ApiException {
            return getChildrenWithHttpInfo(blockId, notionVersion, startCursor, pageSize);
        }

        /**
         * Execute getChildren request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockGetChildrenResponse> _callback) throws ApiException {
            return getChildrenAsync(blockId, notionVersion, startCursor, pageSize, _callback);
        }
    }

    /**
     * Retrieve block children
     * 
     * @param blockId Identifier for a [block](ref:block) (required)
     * @param notionVersion  (required)
     * @return GetChildrenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetChildrenRequestBuilder getChildren(String blockId, String notionVersion) throws IllegalArgumentException {
        if (blockId == null) throw new IllegalArgumentException("\"blockId\" is required but got null");
            

        if (notionVersion == null) throw new IllegalArgumentException("\"notionVersion\" is required but got null");
            

        return new GetChildrenRequestBuilder(blockId, notionVersion);
    }
    private okhttp3.Call getDetailsCall(String blockId, String notionVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String blockId, String notionVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getDetails(Async)");
        }

        return getDetailsCall(blockId, notionVersion, _callback);

    }


    private ApiResponse<BlockGetDetailsResponse> getDetailsWithHttpInfo(String blockId, String notionVersion) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(blockId, notionVersion, null);
        Type localVarReturnType = new TypeToken<BlockGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String blockId, String notionVersion, final ApiCallback<BlockGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(blockId, notionVersion, _callback);
        Type localVarReturnType = new TypeToken<BlockGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String blockId;
        private String notionVersion;

        private GetDetailsRequestBuilder(String blockId) {
            this.blockId = blockId;
        }

        /**
         * Set notionVersion
         * @param notionVersion  (optional, default to 2022-06-28)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder notionVersion(String notionVersion) {
            this.notionVersion = notionVersion;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(blockId, notionVersion, _callback);
        }


        /**
         * Execute getDetails request
         * @return BlockGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BlockGetDetailsResponse execute() throws ApiException {
            ApiResponse<BlockGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(blockId, notionVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;BlockGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(blockId, notionVersion);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(blockId, notionVersion, _callback);
        }
    }

    /**
     * Retrieve a block
     * 
     * @param blockId Identifier for a Notion block (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String blockId) throws IllegalArgumentException {
        if (blockId == null) throw new IllegalArgumentException("\"blockId\" is required but got null");
            

        return new GetDetailsRequestBuilder(blockId);
    }
    private okhttp3.Call removeBlockByIdCall(String blockId, String notionVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeBlockByIdValidateBeforeCall(String blockId, String notionVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling removeBlockById(Async)");
        }

        return removeBlockByIdCall(blockId, notionVersion, _callback);

    }


    private ApiResponse<BlockRemoveBlockByIdResponse> removeBlockByIdWithHttpInfo(String blockId, String notionVersion) throws ApiException {
        okhttp3.Call localVarCall = removeBlockByIdValidateBeforeCall(blockId, notionVersion, null);
        Type localVarReturnType = new TypeToken<BlockRemoveBlockByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeBlockByIdAsync(String blockId, String notionVersion, final ApiCallback<BlockRemoveBlockByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeBlockByIdValidateBeforeCall(blockId, notionVersion, _callback);
        Type localVarReturnType = new TypeToken<BlockRemoveBlockByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveBlockByIdRequestBuilder {
        private final String blockId;
        private String notionVersion;

        private RemoveBlockByIdRequestBuilder(String blockId) {
            this.blockId = blockId;
        }

        /**
         * Set notionVersion
         * @param notionVersion  (optional, default to 2022-06-28)
         * @return RemoveBlockByIdRequestBuilder
         */
        public RemoveBlockByIdRequestBuilder notionVersion(String notionVersion) {
            this.notionVersion = notionVersion;
            return this;
        }
        
        /**
         * Build call for removeBlockById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeBlockByIdCall(blockId, notionVersion, _callback);
        }


        /**
         * Execute removeBlockById request
         * @return BlockRemoveBlockByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BlockRemoveBlockByIdResponse execute() throws ApiException {
            ApiResponse<BlockRemoveBlockByIdResponse> localVarResp = removeBlockByIdWithHttpInfo(blockId, notionVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeBlockById request with HTTP info returned
         * @return ApiResponse&lt;BlockRemoveBlockByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockRemoveBlockByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeBlockByIdWithHttpInfo(blockId, notionVersion);
        }

        /**
         * Execute removeBlockById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockRemoveBlockByIdResponse> _callback) throws ApiException {
            return removeBlockByIdAsync(blockId, notionVersion, _callback);
        }
    }

    /**
     * Delete a block
     * 
     * @param blockId Identifier for a Notion block (required)
     * @return RemoveBlockByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveBlockByIdRequestBuilder removeBlockById(String blockId) throws IllegalArgumentException {
        if (blockId == null) throw new IllegalArgumentException("\"blockId\" is required but got null");
            

        return new RemoveBlockByIdRequestBuilder(blockId);
    }
    private okhttp3.Call updateBlockByIdCall(String blockId, String notionVersion, BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blockUpdateBlockByIdRequest;

        // create path and map variables
        String localVarPath = "/v1/blocks/{block_id}"
            .replace("{" + "block_id" + "}", localVarApiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBlockByIdValidateBeforeCall(String blockId, String notionVersion, BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling updateBlockById(Async)");
        }

        return updateBlockByIdCall(blockId, notionVersion, blockUpdateBlockByIdRequest, _callback);

    }


    private ApiResponse<BlockUpdateBlockByIdResponse> updateBlockByIdWithHttpInfo(String blockId, String notionVersion, BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBlockByIdValidateBeforeCall(blockId, notionVersion, blockUpdateBlockByIdRequest, null);
        Type localVarReturnType = new TypeToken<BlockUpdateBlockByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBlockByIdAsync(String blockId, String notionVersion, BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest, final ApiCallback<BlockUpdateBlockByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBlockByIdValidateBeforeCall(blockId, notionVersion, blockUpdateBlockByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockUpdateBlockByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBlockByIdRequestBuilder {
        private final String blockId;
        private Object leftCurlyBracketTypeRightCurlyBracket;
        private Boolean archived;
        private String notionVersion;

        private UpdateBlockByIdRequestBuilder(String blockId) {
            this.blockId = blockId;
        }

        /**
         * Set leftCurlyBracketTypeRightCurlyBracket
         * @param leftCurlyBracketTypeRightCurlyBracket The [block object &#x60;type&#x60;](ref:block#block-object-keys) value with the properties to be updated. Currently only &#x60;text&#x60; (for supported block types) and &#x60;checked&#x60; (for &#x60;to_do&#x60; blocks) fields can be updated. (optional)
         * @return UpdateBlockByIdRequestBuilder
         */
        public UpdateBlockByIdRequestBuilder leftCurlyBracketTypeRightCurlyBracket(Object leftCurlyBracketTypeRightCurlyBracket) {
            this.leftCurlyBracketTypeRightCurlyBracket = leftCurlyBracketTypeRightCurlyBracket;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Set to true to archive (delete) a block. Set to false to un-archive (restore) a block. (optional, default to true)
         * @return UpdateBlockByIdRequestBuilder
         */
        public UpdateBlockByIdRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set notionVersion
         * @param notionVersion  (optional, default to 2022-06-28)
         * @return UpdateBlockByIdRequestBuilder
         */
        public UpdateBlockByIdRequestBuilder notionVersion(String notionVersion) {
            this.notionVersion = notionVersion;
            return this;
        }
        
        /**
         * Build call for updateBlockById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest = buildBodyParams();
            return updateBlockByIdCall(blockId, notionVersion, blockUpdateBlockByIdRequest, _callback);
        }

        private BlockUpdateBlockByIdRequest buildBodyParams() {
            BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest = new BlockUpdateBlockByIdRequest();
            blockUpdateBlockByIdRequest.leftCurlyBracketTypeRightCurlyBracket(this.leftCurlyBracketTypeRightCurlyBracket);
            blockUpdateBlockByIdRequest.archived(this.archived);
            return blockUpdateBlockByIdRequest;
        }

        /**
         * Execute updateBlockById request
         * @return BlockUpdateBlockByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BlockUpdateBlockByIdResponse execute() throws ApiException {
            BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest = buildBodyParams();
            ApiResponse<BlockUpdateBlockByIdResponse> localVarResp = updateBlockByIdWithHttpInfo(blockId, notionVersion, blockUpdateBlockByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBlockById request with HTTP info returned
         * @return ApiResponse&lt;BlockUpdateBlockByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BlockUpdateBlockByIdResponse> executeWithHttpInfo() throws ApiException {
            BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest = buildBodyParams();
            return updateBlockByIdWithHttpInfo(blockId, notionVersion, blockUpdateBlockByIdRequest);
        }

        /**
         * Execute updateBlockById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BlockUpdateBlockByIdResponse> _callback) throws ApiException {
            BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest = buildBodyParams();
            return updateBlockByIdAsync(blockId, notionVersion, blockUpdateBlockByIdRequest, _callback);
        }
    }

    /**
     * Update a block
     * 
     * @param blockId Identifier for a Notion block (required)
     * @return UpdateBlockByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBlockByIdRequestBuilder updateBlockById(String blockId) throws IllegalArgumentException {
        if (blockId == null) throw new IllegalArgumentException("\"blockId\" is required but got null");
            

        return new UpdateBlockByIdRequestBuilder(blockId);
    }
}
