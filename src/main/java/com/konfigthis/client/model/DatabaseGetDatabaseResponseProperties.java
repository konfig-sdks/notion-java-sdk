/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseProperties1;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesDescription;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesFoodGroup;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesInStock;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesLastOrdered;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesMeals;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesName;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesNumberOfMeals;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesPhoto;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesPrice;
import com.konfigthis.client.model.DatabaseGetDatabaseResponsePropertiesStoreAvailability;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DatabaseGetDatabaseResponseProperties
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DatabaseGetDatabaseResponseProperties {
  public static final String SERIALIZED_NAME_PLUS1 = "+1";
  @SerializedName(SERIALIZED_NAME_PLUS1)
  private DatabaseGetDatabaseResponseProperties1 plus1;

  public static final String SERIALIZED_NAME_IN_STOCK = "In stock";
  @SerializedName(SERIALIZED_NAME_IN_STOCK)
  private DatabaseGetDatabaseResponsePropertiesInStock inStock;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private DatabaseGetDatabaseResponsePropertiesPrice price;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private DatabaseGetDatabaseResponsePropertiesDescription description;

  public static final String SERIALIZED_NAME_LAST_ORDERED = "Last ordered";
  @SerializedName(SERIALIZED_NAME_LAST_ORDERED)
  private DatabaseGetDatabaseResponsePropertiesLastOrdered lastOrdered;

  public static final String SERIALIZED_NAME_MEALS = "Meals";
  @SerializedName(SERIALIZED_NAME_MEALS)
  private DatabaseGetDatabaseResponsePropertiesMeals meals;

  public static final String SERIALIZED_NAME_NUMBER_OF_MEALS = "Number of meals";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MEALS)
  private DatabaseGetDatabaseResponsePropertiesNumberOfMeals numberOfMeals;

  public static final String SERIALIZED_NAME_STORE_AVAILABILITY = "Store availability";
  @SerializedName(SERIALIZED_NAME_STORE_AVAILABILITY)
  private DatabaseGetDatabaseResponsePropertiesStoreAvailability storeAvailability;

  public static final String SERIALIZED_NAME_PHOTO = "Photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private DatabaseGetDatabaseResponsePropertiesPhoto photo;

  public static final String SERIALIZED_NAME_FOOD_GROUP = "Food group";
  @SerializedName(SERIALIZED_NAME_FOOD_GROUP)
  private DatabaseGetDatabaseResponsePropertiesFoodGroup foodGroup;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private DatabaseGetDatabaseResponsePropertiesName name;

  public DatabaseGetDatabaseResponseProperties() {
  }

  public DatabaseGetDatabaseResponseProperties plus1(DatabaseGetDatabaseResponseProperties1 plus1) {
    
    
    
    
    this.plus1 = plus1;
    return this;
  }

   /**
   * Get plus1
   * @return plus1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponseProperties1 getPlus1() {
    return plus1;
  }


  public void setPlus1(DatabaseGetDatabaseResponseProperties1 plus1) {
    
    
    
    this.plus1 = plus1;
  }


  public DatabaseGetDatabaseResponseProperties inStock(DatabaseGetDatabaseResponsePropertiesInStock inStock) {
    
    
    
    
    this.inStock = inStock;
    return this;
  }

   /**
   * Get inStock
   * @return inStock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesInStock getInStock() {
    return inStock;
  }


  public void setInStock(DatabaseGetDatabaseResponsePropertiesInStock inStock) {
    
    
    
    this.inStock = inStock;
  }


  public DatabaseGetDatabaseResponseProperties price(DatabaseGetDatabaseResponsePropertiesPrice price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesPrice getPrice() {
    return price;
  }


  public void setPrice(DatabaseGetDatabaseResponsePropertiesPrice price) {
    
    
    
    this.price = price;
  }


  public DatabaseGetDatabaseResponseProperties description(DatabaseGetDatabaseResponsePropertiesDescription description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesDescription getDescription() {
    return description;
  }


  public void setDescription(DatabaseGetDatabaseResponsePropertiesDescription description) {
    
    
    
    this.description = description;
  }


  public DatabaseGetDatabaseResponseProperties lastOrdered(DatabaseGetDatabaseResponsePropertiesLastOrdered lastOrdered) {
    
    
    
    
    this.lastOrdered = lastOrdered;
    return this;
  }

   /**
   * Get lastOrdered
   * @return lastOrdered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesLastOrdered getLastOrdered() {
    return lastOrdered;
  }


  public void setLastOrdered(DatabaseGetDatabaseResponsePropertiesLastOrdered lastOrdered) {
    
    
    
    this.lastOrdered = lastOrdered;
  }


  public DatabaseGetDatabaseResponseProperties meals(DatabaseGetDatabaseResponsePropertiesMeals meals) {
    
    
    
    
    this.meals = meals;
    return this;
  }

   /**
   * Get meals
   * @return meals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesMeals getMeals() {
    return meals;
  }


  public void setMeals(DatabaseGetDatabaseResponsePropertiesMeals meals) {
    
    
    
    this.meals = meals;
  }


  public DatabaseGetDatabaseResponseProperties numberOfMeals(DatabaseGetDatabaseResponsePropertiesNumberOfMeals numberOfMeals) {
    
    
    
    
    this.numberOfMeals = numberOfMeals;
    return this;
  }

   /**
   * Get numberOfMeals
   * @return numberOfMeals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesNumberOfMeals getNumberOfMeals() {
    return numberOfMeals;
  }


  public void setNumberOfMeals(DatabaseGetDatabaseResponsePropertiesNumberOfMeals numberOfMeals) {
    
    
    
    this.numberOfMeals = numberOfMeals;
  }


  public DatabaseGetDatabaseResponseProperties storeAvailability(DatabaseGetDatabaseResponsePropertiesStoreAvailability storeAvailability) {
    
    
    
    
    this.storeAvailability = storeAvailability;
    return this;
  }

   /**
   * Get storeAvailability
   * @return storeAvailability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesStoreAvailability getStoreAvailability() {
    return storeAvailability;
  }


  public void setStoreAvailability(DatabaseGetDatabaseResponsePropertiesStoreAvailability storeAvailability) {
    
    
    
    this.storeAvailability = storeAvailability;
  }


  public DatabaseGetDatabaseResponseProperties photo(DatabaseGetDatabaseResponsePropertiesPhoto photo) {
    
    
    
    
    this.photo = photo;
    return this;
  }

   /**
   * Get photo
   * @return photo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesPhoto getPhoto() {
    return photo;
  }


  public void setPhoto(DatabaseGetDatabaseResponsePropertiesPhoto photo) {
    
    
    
    this.photo = photo;
  }


  public DatabaseGetDatabaseResponseProperties foodGroup(DatabaseGetDatabaseResponsePropertiesFoodGroup foodGroup) {
    
    
    
    
    this.foodGroup = foodGroup;
    return this;
  }

   /**
   * Get foodGroup
   * @return foodGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesFoodGroup getFoodGroup() {
    return foodGroup;
  }


  public void setFoodGroup(DatabaseGetDatabaseResponsePropertiesFoodGroup foodGroup) {
    
    
    
    this.foodGroup = foodGroup;
  }


  public DatabaseGetDatabaseResponseProperties name(DatabaseGetDatabaseResponsePropertiesName name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponsePropertiesName getName() {
    return name;
  }


  public void setName(DatabaseGetDatabaseResponsePropertiesName name) {
    
    
    
    this.name = name;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DatabaseGetDatabaseResponseProperties instance itself
   */
  public DatabaseGetDatabaseResponseProperties putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseGetDatabaseResponseProperties databaseGetDatabaseResponseProperties = (DatabaseGetDatabaseResponseProperties) o;
    return Objects.equals(this.plus1, databaseGetDatabaseResponseProperties.plus1) &&
        Objects.equals(this.inStock, databaseGetDatabaseResponseProperties.inStock) &&
        Objects.equals(this.price, databaseGetDatabaseResponseProperties.price) &&
        Objects.equals(this.description, databaseGetDatabaseResponseProperties.description) &&
        Objects.equals(this.lastOrdered, databaseGetDatabaseResponseProperties.lastOrdered) &&
        Objects.equals(this.meals, databaseGetDatabaseResponseProperties.meals) &&
        Objects.equals(this.numberOfMeals, databaseGetDatabaseResponseProperties.numberOfMeals) &&
        Objects.equals(this.storeAvailability, databaseGetDatabaseResponseProperties.storeAvailability) &&
        Objects.equals(this.photo, databaseGetDatabaseResponseProperties.photo) &&
        Objects.equals(this.foodGroup, databaseGetDatabaseResponseProperties.foodGroup) &&
        Objects.equals(this.name, databaseGetDatabaseResponseProperties.name)&&
        Objects.equals(this.additionalProperties, databaseGetDatabaseResponseProperties.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plus1, inStock, price, description, lastOrdered, meals, numberOfMeals, storeAvailability, photo, foodGroup, name, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseGetDatabaseResponseProperties {\n");
    sb.append("    plus1: ").append(toIndentedString(plus1)).append("\n");
    sb.append("    inStock: ").append(toIndentedString(inStock)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastOrdered: ").append(toIndentedString(lastOrdered)).append("\n");
    sb.append("    meals: ").append(toIndentedString(meals)).append("\n");
    sb.append("    numberOfMeals: ").append(toIndentedString(numberOfMeals)).append("\n");
    sb.append("    storeAvailability: ").append(toIndentedString(storeAvailability)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    foodGroup: ").append(toIndentedString(foodGroup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("+1");
    openapiFields.add("In stock");
    openapiFields.add("Price");
    openapiFields.add("Description");
    openapiFields.add("Last ordered");
    openapiFields.add("Meals");
    openapiFields.add("Number of meals");
    openapiFields.add("Store availability");
    openapiFields.add("Photo");
    openapiFields.add("Food group");
    openapiFields.add("Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DatabaseGetDatabaseResponseProperties
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DatabaseGetDatabaseResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseGetDatabaseResponseProperties is not found in the empty JSON string", DatabaseGetDatabaseResponseProperties.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `+1`
      if (jsonObj.get("+1") != null && !jsonObj.get("+1").isJsonNull()) {
        DatabaseGetDatabaseResponseProperties1.validateJsonObject(jsonObj.getAsJsonObject("+1"));
      }
      // validate the optional field `In stock`
      if (jsonObj.get("In stock") != null && !jsonObj.get("In stock").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesInStock.validateJsonObject(jsonObj.getAsJsonObject("In stock"));
      }
      // validate the optional field `Price`
      if (jsonObj.get("Price") != null && !jsonObj.get("Price").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesPrice.validateJsonObject(jsonObj.getAsJsonObject("Price"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesDescription.validateJsonObject(jsonObj.getAsJsonObject("Description"));
      }
      // validate the optional field `Last ordered`
      if (jsonObj.get("Last ordered") != null && !jsonObj.get("Last ordered").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesLastOrdered.validateJsonObject(jsonObj.getAsJsonObject("Last ordered"));
      }
      // validate the optional field `Meals`
      if (jsonObj.get("Meals") != null && !jsonObj.get("Meals").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesMeals.validateJsonObject(jsonObj.getAsJsonObject("Meals"));
      }
      // validate the optional field `Number of meals`
      if (jsonObj.get("Number of meals") != null && !jsonObj.get("Number of meals").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesNumberOfMeals.validateJsonObject(jsonObj.getAsJsonObject("Number of meals"));
      }
      // validate the optional field `Store availability`
      if (jsonObj.get("Store availability") != null && !jsonObj.get("Store availability").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesStoreAvailability.validateJsonObject(jsonObj.getAsJsonObject("Store availability"));
      }
      // validate the optional field `Photo`
      if (jsonObj.get("Photo") != null && !jsonObj.get("Photo").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesPhoto.validateJsonObject(jsonObj.getAsJsonObject("Photo"));
      }
      // validate the optional field `Food group`
      if (jsonObj.get("Food group") != null && !jsonObj.get("Food group").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesFoodGroup.validateJsonObject(jsonObj.getAsJsonObject("Food group"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        DatabaseGetDatabaseResponsePropertiesName.validateJsonObject(jsonObj.getAsJsonObject("Name"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseGetDatabaseResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseGetDatabaseResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseGetDatabaseResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseGetDatabaseResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseGetDatabaseResponseProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseGetDatabaseResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseGetDatabaseResponseProperties read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DatabaseGetDatabaseResponseProperties instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatabaseGetDatabaseResponseProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatabaseGetDatabaseResponseProperties
  * @throws IOException if the JSON string is invalid with respect to DatabaseGetDatabaseResponseProperties
  */
  public static DatabaseGetDatabaseResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseGetDatabaseResponseProperties.class);
  }

 /**
  * Convert an instance of DatabaseGetDatabaseResponseProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

