/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CommentGetListResponseResultsInnerCreatedBy;
import com.konfigthis.client.model.CommentGetListResponseResultsInnerParent;
import com.konfigthis.client.model.CommentGetListResponseResultsInnerRichTextInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CommentGetListResponseResultsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CommentGetListResponseResultsInner {
  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private CommentGetListResponseResultsInnerParent parent;

  public static final String SERIALIZED_NAME_DISCUSSION_ID = "discussion_id";
  @SerializedName(SERIALIZED_NAME_DISCUSSION_ID)
  private String discussionId;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_LAST_EDITED_TIME = "last_edited_time";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_TIME)
  private String lastEditedTime;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private CommentGetListResponseResultsInnerCreatedBy createdBy;

  public static final String SERIALIZED_NAME_RICH_TEXT = "rich_text";
  @SerializedName(SERIALIZED_NAME_RICH_TEXT)
  private List<CommentGetListResponseResultsInnerRichTextInner> richText = null;

  public CommentGetListResponseResultsInner() {
  }

  public CommentGetListResponseResultsInner _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "comment", value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public CommentGetListResponseResultsInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "94cc56ab-9f02-409d-9f99-1037e9fe502f", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CommentGetListResponseResultsInner parent(CommentGetListResponseResultsInnerParent parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommentGetListResponseResultsInnerParent getParent() {
    return parent;
  }


  public void setParent(CommentGetListResponseResultsInnerParent parent) {
    
    
    
    this.parent = parent;
  }


  public CommentGetListResponseResultsInner discussionId(String discussionId) {
    
    
    
    
    this.discussionId = discussionId;
    return this;
  }

   /**
   * Get discussionId
   * @return discussionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "f1407351-36f5-4c49-a13c-49f8ba11776d", value = "")

  public String getDiscussionId() {
    return discussionId;
  }


  public void setDiscussionId(String discussionId) {
    
    
    
    this.discussionId = discussionId;
  }


  public CommentGetListResponseResultsInner createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-15T16:52:00.000Z", value = "")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public CommentGetListResponseResultsInner lastEditedTime(String lastEditedTime) {
    
    
    
    
    this.lastEditedTime = lastEditedTime;
    return this;
  }

   /**
   * Get lastEditedTime
   * @return lastEditedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-15T19:16:00.000Z", value = "")

  public String getLastEditedTime() {
    return lastEditedTime;
  }


  public void setLastEditedTime(String lastEditedTime) {
    
    
    
    this.lastEditedTime = lastEditedTime;
  }


  public CommentGetListResponseResultsInner createdBy(CommentGetListResponseResultsInnerCreatedBy createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommentGetListResponseResultsInnerCreatedBy getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(CommentGetListResponseResultsInnerCreatedBy createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public CommentGetListResponseResultsInner richText(List<CommentGetListResponseResultsInnerRichTextInner> richText) {
    
    
    
    
    this.richText = richText;
    return this;
  }

  public CommentGetListResponseResultsInner addRichTextItem(CommentGetListResponseResultsInnerRichTextInner richTextItem) {
    if (this.richText == null) {
      this.richText = new ArrayList<>();
    }
    this.richText.add(richTextItem);
    return this;
  }

   /**
   * Get richText
   * @return richText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommentGetListResponseResultsInnerRichTextInner> getRichText() {
    return richText;
  }


  public void setRichText(List<CommentGetListResponseResultsInnerRichTextInner> richText) {
    
    
    
    this.richText = richText;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CommentGetListResponseResultsInner instance itself
   */
  public CommentGetListResponseResultsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentGetListResponseResultsInner commentGetListResponseResultsInner = (CommentGetListResponseResultsInner) o;
    return Objects.equals(this._object, commentGetListResponseResultsInner._object) &&
        Objects.equals(this.id, commentGetListResponseResultsInner.id) &&
        Objects.equals(this.parent, commentGetListResponseResultsInner.parent) &&
        Objects.equals(this.discussionId, commentGetListResponseResultsInner.discussionId) &&
        Objects.equals(this.createdTime, commentGetListResponseResultsInner.createdTime) &&
        Objects.equals(this.lastEditedTime, commentGetListResponseResultsInner.lastEditedTime) &&
        Objects.equals(this.createdBy, commentGetListResponseResultsInner.createdBy) &&
        Objects.equals(this.richText, commentGetListResponseResultsInner.richText)&&
        Objects.equals(this.additionalProperties, commentGetListResponseResultsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_object, id, parent, discussionId, createdTime, lastEditedTime, createdBy, richText, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentGetListResponseResultsInner {\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    discussionId: ").append(toIndentedString(discussionId)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastEditedTime: ").append(toIndentedString(lastEditedTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    richText: ").append(toIndentedString(richText)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("object");
    openapiFields.add("id");
    openapiFields.add("parent");
    openapiFields.add("discussion_id");
    openapiFields.add("created_time");
    openapiFields.add("last_edited_time");
    openapiFields.add("created_by");
    openapiFields.add("rich_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommentGetListResponseResultsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommentGetListResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommentGetListResponseResultsInner is not found in the empty JSON string", CommentGetListResponseResultsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        CommentGetListResponseResultsInnerParent.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      if ((jsonObj.get("discussion_id") != null && !jsonObj.get("discussion_id").isJsonNull()) && !jsonObj.get("discussion_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discussion_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discussion_id").toString()));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("last_edited_time") != null && !jsonObj.get("last_edited_time").isJsonNull()) && !jsonObj.get("last_edited_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_edited_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_edited_time").toString()));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        CommentGetListResponseResultsInnerCreatedBy.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      if (jsonObj.get("rich_text") != null && !jsonObj.get("rich_text").isJsonNull()) {
        JsonArray jsonArrayrichText = jsonObj.getAsJsonArray("rich_text");
        if (jsonArrayrichText != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rich_text").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rich_text` to be an array in the JSON string but got `%s`", jsonObj.get("rich_text").toString()));
          }

          // validate the optional field `rich_text` (array)
          for (int i = 0; i < jsonArrayrichText.size(); i++) {
            CommentGetListResponseResultsInnerRichTextInner.validateJsonObject(jsonArrayrichText.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommentGetListResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommentGetListResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommentGetListResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommentGetListResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CommentGetListResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, CommentGetListResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CommentGetListResponseResultsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CommentGetListResponseResultsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommentGetListResponseResultsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommentGetListResponseResultsInner
  * @throws IOException if the JSON string is invalid with respect to CommentGetListResponseResultsInner
  */
  public static CommentGetListResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommentGetListResponseResultsInner.class);
  }

 /**
  * Convert an instance of CommentGetListResponseResultsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

