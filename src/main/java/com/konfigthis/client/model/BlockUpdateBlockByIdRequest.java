/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BlockUpdateBlockByIdRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BlockUpdateBlockByIdRequest {
  public static final String SERIALIZED_NAME_LEFT_CURLY_BRACKET_TYPE_RIGHT_CURLY_BRACKET = "{type}";
  @SerializedName(SERIALIZED_NAME_LEFT_CURLY_BRACKET_TYPE_RIGHT_CURLY_BRACKET)
  private Object leftCurlyBracketTypeRightCurlyBracket;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = true;

  public BlockUpdateBlockByIdRequest() {
  }

  public BlockUpdateBlockByIdRequest leftCurlyBracketTypeRightCurlyBracket(Object leftCurlyBracketTypeRightCurlyBracket) {
    
    
    
    
    this.leftCurlyBracketTypeRightCurlyBracket = leftCurlyBracketTypeRightCurlyBracket;
    return this;
  }

   /**
   * The [block object &#x60;type&#x60;](ref:block#block-object-keys) value with the properties to be updated. Currently only &#x60;text&#x60; (for supported block types) and &#x60;checked&#x60; (for &#x60;to_do&#x60; blocks) fields can be updated.
   * @return leftCurlyBracketTypeRightCurlyBracket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The [block object `type`](ref:block#block-object-keys) value with the properties to be updated. Currently only `text` (for supported block types) and `checked` (for `to_do` blocks) fields can be updated.")

  public Object getLeftCurlyBracketTypeRightCurlyBracket() {
    return leftCurlyBracketTypeRightCurlyBracket;
  }


  public void setLeftCurlyBracketTypeRightCurlyBracket(Object leftCurlyBracketTypeRightCurlyBracket) {
    
    
    
    this.leftCurlyBracketTypeRightCurlyBracket = leftCurlyBracketTypeRightCurlyBracket;
  }


  public BlockUpdateBlockByIdRequest archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BlockUpdateBlockByIdRequest instance itself
   */
  public BlockUpdateBlockByIdRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockUpdateBlockByIdRequest blockUpdateBlockByIdRequest = (BlockUpdateBlockByIdRequest) o;
    return Objects.equals(this.leftCurlyBracketTypeRightCurlyBracket, blockUpdateBlockByIdRequest.leftCurlyBracketTypeRightCurlyBracket) &&
        Objects.equals(this.archived, blockUpdateBlockByIdRequest.archived)&&
        Objects.equals(this.additionalProperties, blockUpdateBlockByIdRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leftCurlyBracketTypeRightCurlyBracket, archived, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockUpdateBlockByIdRequest {\n");
    sb.append("    leftCurlyBracketTypeRightCurlyBracket: ").append(toIndentedString(leftCurlyBracketTypeRightCurlyBracket)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("{type}");
    openapiFields.add("archived");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BlockUpdateBlockByIdRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BlockUpdateBlockByIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockUpdateBlockByIdRequest is not found in the empty JSON string", BlockUpdateBlockByIdRequest.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockUpdateBlockByIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockUpdateBlockByIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockUpdateBlockByIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockUpdateBlockByIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockUpdateBlockByIdRequest>() {
           @Override
           public void write(JsonWriter out, BlockUpdateBlockByIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockUpdateBlockByIdRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BlockUpdateBlockByIdRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlockUpdateBlockByIdRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockUpdateBlockByIdRequest
  * @throws IOException if the JSON string is invalid with respect to BlockUpdateBlockByIdRequest
  */
  public static BlockUpdateBlockByIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockUpdateBlockByIdRequest.class);
  }

 /**
  * Convert an instance of BlockUpdateBlockByIdRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

