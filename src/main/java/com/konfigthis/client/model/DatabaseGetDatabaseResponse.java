/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseCover;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseDescriptionInner;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseIcon;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseParent;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseProperties;
import com.konfigthis.client.model.DatabaseGetDatabaseResponseTitleInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DatabaseGetDatabaseResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DatabaseGetDatabaseResponse {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private List<DatabaseGetDatabaseResponseTitleInner> title = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private List<DatabaseGetDatabaseResponseDescriptionInner> description = null;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_LAST_EDITED_TIME = "last_edited_time";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_TIME)
  private String lastEditedTime;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private DatabaseGetDatabaseResponseIcon icon;

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private DatabaseGetDatabaseResponseCover cover;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private DatabaseGetDatabaseResponseProperties properties;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private DatabaseGetDatabaseResponseParent parent;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = true;

  public static final String SERIALIZED_NAME_IS_INLINE = "is_inline";
  @SerializedName(SERIALIZED_NAME_IS_INLINE)
  private Boolean isInline = true;

  public static final String SERIALIZED_NAME_PUBLIC_URL = "public_url";
  @SerializedName(SERIALIZED_NAME_PUBLIC_URL)
  private Object publicUrl = null;

  public DatabaseGetDatabaseResponse() {
  }

  public DatabaseGetDatabaseResponse title(List<DatabaseGetDatabaseResponseTitleInner> title) {
    
    
    
    
    this.title = title;
    return this;
  }

  public DatabaseGetDatabaseResponse addTitleItem(DatabaseGetDatabaseResponseTitleInner titleItem) {
    if (this.title == null) {
      this.title = new ArrayList<>();
    }
    this.title.add(titleItem);
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DatabaseGetDatabaseResponseTitleInner> getTitle() {
    return title;
  }


  public void setTitle(List<DatabaseGetDatabaseResponseTitleInner> title) {
    
    
    
    this.title = title;
  }


  public DatabaseGetDatabaseResponse description(List<DatabaseGetDatabaseResponseDescriptionInner> description) {
    
    
    
    
    this.description = description;
    return this;
  }

  public DatabaseGetDatabaseResponse addDescriptionItem(DatabaseGetDatabaseResponseDescriptionInner descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DatabaseGetDatabaseResponseDescriptionInner> getDescription() {
    return description;
  }


  public void setDescription(List<DatabaseGetDatabaseResponseDescriptionInner> description) {
    
    
    
    this.description = description;
  }


  public DatabaseGetDatabaseResponse _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "database", value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public DatabaseGetDatabaseResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bc1211ca-e3f1-4939-ae34-5260b16f627c", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public DatabaseGetDatabaseResponse createdTime(String createdTime) {
    
    
    
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-08T23:50:00.000Z", value = "")

  public String getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(String createdTime) {
    
    
    
    this.createdTime = createdTime;
  }


  public DatabaseGetDatabaseResponse lastEditedTime(String lastEditedTime) {
    
    
    
    
    this.lastEditedTime = lastEditedTime;
    return this;
  }

   /**
   * Get lastEditedTime
   * @return lastEditedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-08T23:50:00.000Z", value = "")

  public String getLastEditedTime() {
    return lastEditedTime;
  }


  public void setLastEditedTime(String lastEditedTime) {
    
    
    
    this.lastEditedTime = lastEditedTime;
  }


  public DatabaseGetDatabaseResponse icon(DatabaseGetDatabaseResponseIcon icon) {
    
    
    
    
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponseIcon getIcon() {
    return icon;
  }


  public void setIcon(DatabaseGetDatabaseResponseIcon icon) {
    
    
    
    this.icon = icon;
  }


  public DatabaseGetDatabaseResponse cover(DatabaseGetDatabaseResponseCover cover) {
    
    
    
    
    this.cover = cover;
    return this;
  }

   /**
   * Get cover
   * @return cover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponseCover getCover() {
    return cover;
  }


  public void setCover(DatabaseGetDatabaseResponseCover cover) {
    
    
    
    this.cover = cover;
  }


  public DatabaseGetDatabaseResponse url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.notion.so/bc1211cae3f14939ae34260b16f627c", value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public DatabaseGetDatabaseResponse properties(DatabaseGetDatabaseResponseProperties properties) {
    
    
    
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponseProperties getProperties() {
    return properties;
  }


  public void setProperties(DatabaseGetDatabaseResponseProperties properties) {
    
    
    
    this.properties = properties;
  }


  public DatabaseGetDatabaseResponse parent(DatabaseGetDatabaseResponseParent parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseGetDatabaseResponseParent getParent() {
    return parent;
  }


  public void setParent(DatabaseGetDatabaseResponseParent parent) {
    
    
    
    this.parent = parent;
  }


  public DatabaseGetDatabaseResponse archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }


  public DatabaseGetDatabaseResponse isInline(Boolean isInline) {
    
    
    
    
    this.isInline = isInline;
    return this;
  }

   /**
   * Get isInline
   * @return isInline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getIsInline() {
    return isInline;
  }


  public void setIsInline(Boolean isInline) {
    
    
    
    this.isInline = isInline;
  }


  public DatabaseGetDatabaseResponse publicUrl(Object publicUrl) {
    
    
    
    
    this.publicUrl = publicUrl;
    return this;
  }

   /**
   * Get publicUrl
   * @return publicUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPublicUrl() {
    return publicUrl;
  }


  public void setPublicUrl(Object publicUrl) {
    
    
    
    this.publicUrl = publicUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DatabaseGetDatabaseResponse instance itself
   */
  public DatabaseGetDatabaseResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseGetDatabaseResponse databaseGetDatabaseResponse = (DatabaseGetDatabaseResponse) o;
    return Objects.equals(this.title, databaseGetDatabaseResponse.title) &&
        Objects.equals(this.description, databaseGetDatabaseResponse.description) &&
        Objects.equals(this._object, databaseGetDatabaseResponse._object) &&
        Objects.equals(this.id, databaseGetDatabaseResponse.id) &&
        Objects.equals(this.createdTime, databaseGetDatabaseResponse.createdTime) &&
        Objects.equals(this.lastEditedTime, databaseGetDatabaseResponse.lastEditedTime) &&
        Objects.equals(this.icon, databaseGetDatabaseResponse.icon) &&
        Objects.equals(this.cover, databaseGetDatabaseResponse.cover) &&
        Objects.equals(this.url, databaseGetDatabaseResponse.url) &&
        Objects.equals(this.properties, databaseGetDatabaseResponse.properties) &&
        Objects.equals(this.parent, databaseGetDatabaseResponse.parent) &&
        Objects.equals(this.archived, databaseGetDatabaseResponse.archived) &&
        Objects.equals(this.isInline, databaseGetDatabaseResponse.isInline) &&
        Objects.equals(this.publicUrl, databaseGetDatabaseResponse.publicUrl)&&
        Objects.equals(this.additionalProperties, databaseGetDatabaseResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, _object, id, createdTime, lastEditedTime, icon, cover, url, properties, parent, archived, isInline, publicUrl, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseGetDatabaseResponse {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastEditedTime: ").append(toIndentedString(lastEditedTime)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    isInline: ").append(toIndentedString(isInline)).append("\n");
    sb.append("    publicUrl: ").append(toIndentedString(publicUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("object");
    openapiFields.add("id");
    openapiFields.add("created_time");
    openapiFields.add("last_edited_time");
    openapiFields.add("icon");
    openapiFields.add("cover");
    openapiFields.add("url");
    openapiFields.add("properties");
    openapiFields.add("parent");
    openapiFields.add("archived");
    openapiFields.add("is_inline");
    openapiFields.add("public_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DatabaseGetDatabaseResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DatabaseGetDatabaseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseGetDatabaseResponse is not found in the empty JSON string", DatabaseGetDatabaseResponse.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        JsonArray jsonArraytitle = jsonObj.getAsJsonArray("title");
        if (jsonArraytitle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("title").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `title` to be an array in the JSON string but got `%s`", jsonObj.get("title").toString()));
          }

          // validate the optional field `title` (array)
          for (int i = 0; i < jsonArraytitle.size(); i++) {
            DatabaseGetDatabaseResponseTitleInner.validateJsonObject(jsonArraytitle.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        JsonArray jsonArraydescription = jsonObj.getAsJsonArray("description");
        if (jsonArraydescription != null) {
          // ensure the json data is an array
          if (!jsonObj.get("description").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be an array in the JSON string but got `%s`", jsonObj.get("description").toString()));
          }

          // validate the optional field `description` (array)
          for (int i = 0; i < jsonArraydescription.size(); i++) {
            DatabaseGetDatabaseResponseDescriptionInner.validateJsonObject(jsonArraydescription.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("last_edited_time") != null && !jsonObj.get("last_edited_time").isJsonNull()) && !jsonObj.get("last_edited_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_edited_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_edited_time").toString()));
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        DatabaseGetDatabaseResponseIcon.validateJsonObject(jsonObj.getAsJsonObject("icon"));
      }
      // validate the optional field `cover`
      if (jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) {
        DatabaseGetDatabaseResponseCover.validateJsonObject(jsonObj.getAsJsonObject("cover"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        DatabaseGetDatabaseResponseProperties.validateJsonObject(jsonObj.getAsJsonObject("properties"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        DatabaseGetDatabaseResponseParent.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseGetDatabaseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseGetDatabaseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseGetDatabaseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseGetDatabaseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseGetDatabaseResponse>() {
           @Override
           public void write(JsonWriter out, DatabaseGetDatabaseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseGetDatabaseResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DatabaseGetDatabaseResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatabaseGetDatabaseResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatabaseGetDatabaseResponse
  * @throws IOException if the JSON string is invalid with respect to DatabaseGetDatabaseResponse
  */
  public static DatabaseGetDatabaseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseGetDatabaseResponse.class);
  }

 /**
  * Convert an instance of DatabaseGetDatabaseResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

