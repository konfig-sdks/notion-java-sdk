/*
 * Notion API
 * Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TokenGenerateAccessResponseOwner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TokenGenerateAccessResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TokenGenerateAccessResponse {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_BOT_ID = "bot_id";
  @SerializedName(SERIALIZED_NAME_BOT_ID)
  private String botId;

  public static final String SERIALIZED_NAME_DUPLICATED_TEMPLATE_ID = "duplicated_template_id";
  @SerializedName(SERIALIZED_NAME_DUPLICATED_TEMPLATE_ID)
  private Object duplicatedTemplateId = null;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private TokenGenerateAccessResponseOwner owner;

  public static final String SERIALIZED_NAME_WORKSPACE_ICON = "workspace_icon";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ICON)
  private String workspaceIcon;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspace_id";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public static final String SERIALIZED_NAME_WORKSPACE_NAME = "workspace_name";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_NAME)
  private String workspaceName;

  public TokenGenerateAccessResponse() {
  }

  public TokenGenerateAccessResponse accessToken(String accessToken) {
    
    
    
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Get accessToken
   * @return accessToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "e202e8c9-0990-40af-855f-ff8f872b1ec6c", value = "")

  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    
    
    
    this.accessToken = accessToken;
  }


  public TokenGenerateAccessResponse botId(String botId) {
    
    
    
    
    this.botId = botId;
    return this;
  }

   /**
   * Get botId
   * @return botId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "b3414d659-1224-5ty7-6ffr-cc9d8773drt601288f", value = "")

  public String getBotId() {
    return botId;
  }


  public void setBotId(String botId) {
    
    
    
    this.botId = botId;
  }


  public TokenGenerateAccessResponse duplicatedTemplateId(Object duplicatedTemplateId) {
    
    
    
    
    this.duplicatedTemplateId = duplicatedTemplateId;
    return this;
  }

   /**
   * Get duplicatedTemplateId
   * @return duplicatedTemplateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDuplicatedTemplateId() {
    return duplicatedTemplateId;
  }


  public void setDuplicatedTemplateId(Object duplicatedTemplateId) {
    
    
    
    this.duplicatedTemplateId = duplicatedTemplateId;
  }


  public TokenGenerateAccessResponse owner(TokenGenerateAccessResponseOwner owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TokenGenerateAccessResponseOwner getOwner() {
    return owner;
  }


  public void setOwner(TokenGenerateAccessResponseOwner owner) {
    
    
    
    this.owner = owner;
  }


  public TokenGenerateAccessResponse workspaceIcon(String workspaceIcon) {
    
    
    
    
    this.workspaceIcon = workspaceIcon;
    return this;
  }

   /**
   * Get workspaceIcon
   * @return workspaceIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://website.domain/images/image.png", value = "")

  public String getWorkspaceIcon() {
    return workspaceIcon;
  }


  public void setWorkspaceIcon(String workspaceIcon) {
    
    
    
    this.workspaceIcon = workspaceIcon;
  }


  public TokenGenerateAccessResponse workspaceId(String workspaceId) {
    
    
    
    
    this.workspaceId = workspaceId;
    return this;
  }

   /**
   * Get workspaceId
   * @return workspaceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "j565j4d7x3-2882-61bs-564a-jj9d9ui-c36hxfr7x", value = "")

  public String getWorkspaceId() {
    return workspaceId;
  }


  public void setWorkspaceId(String workspaceId) {
    
    
    
    this.workspaceId = workspaceId;
  }


  public TokenGenerateAccessResponse workspaceName(String workspaceName) {
    
    
    
    
    this.workspaceName = workspaceName;
    return this;
  }

   /**
   * Get workspaceName
   * @return workspaceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Ada's Notion Workspace", value = "")

  public String getWorkspaceName() {
    return workspaceName;
  }


  public void setWorkspaceName(String workspaceName) {
    
    
    
    this.workspaceName = workspaceName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenGenerateAccessResponse instance itself
   */
  public TokenGenerateAccessResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenGenerateAccessResponse tokenGenerateAccessResponse = (TokenGenerateAccessResponse) o;
    return Objects.equals(this.accessToken, tokenGenerateAccessResponse.accessToken) &&
        Objects.equals(this.botId, tokenGenerateAccessResponse.botId) &&
        Objects.equals(this.duplicatedTemplateId, tokenGenerateAccessResponse.duplicatedTemplateId) &&
        Objects.equals(this.owner, tokenGenerateAccessResponse.owner) &&
        Objects.equals(this.workspaceIcon, tokenGenerateAccessResponse.workspaceIcon) &&
        Objects.equals(this.workspaceId, tokenGenerateAccessResponse.workspaceId) &&
        Objects.equals(this.workspaceName, tokenGenerateAccessResponse.workspaceName)&&
        Objects.equals(this.additionalProperties, tokenGenerateAccessResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, botId, duplicatedTemplateId, owner, workspaceIcon, workspaceId, workspaceName, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenGenerateAccessResponse {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    botId: ").append(toIndentedString(botId)).append("\n");
    sb.append("    duplicatedTemplateId: ").append(toIndentedString(duplicatedTemplateId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    workspaceIcon: ").append(toIndentedString(workspaceIcon)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    workspaceName: ").append(toIndentedString(workspaceName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token");
    openapiFields.add("bot_id");
    openapiFields.add("duplicated_template_id");
    openapiFields.add("owner");
    openapiFields.add("workspace_icon");
    openapiFields.add("workspace_id");
    openapiFields.add("workspace_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TokenGenerateAccessResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TokenGenerateAccessResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenGenerateAccessResponse is not found in the empty JSON string", TokenGenerateAccessResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("access_token") != null && !jsonObj.get("access_token").isJsonNull()) && !jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
      if ((jsonObj.get("bot_id") != null && !jsonObj.get("bot_id").isJsonNull()) && !jsonObj.get("bot_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bot_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bot_id").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        TokenGenerateAccessResponseOwner.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      }
      if ((jsonObj.get("workspace_icon") != null && !jsonObj.get("workspace_icon").isJsonNull()) && !jsonObj.get("workspace_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_icon").toString()));
      }
      if ((jsonObj.get("workspace_id") != null && !jsonObj.get("workspace_id").isJsonNull()) && !jsonObj.get("workspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_id").toString()));
      }
      if ((jsonObj.get("workspace_name") != null && !jsonObj.get("workspace_name").isJsonNull()) && !jsonObj.get("workspace_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenGenerateAccessResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenGenerateAccessResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenGenerateAccessResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenGenerateAccessResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenGenerateAccessResponse>() {
           @Override
           public void write(JsonWriter out, TokenGenerateAccessResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenGenerateAccessResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TokenGenerateAccessResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenGenerateAccessResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenGenerateAccessResponse
  * @throws IOException if the JSON string is invalid with respect to TokenGenerateAccessResponse
  */
  public static TokenGenerateAccessResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenGenerateAccessResponse.class);
  }

 /**
  * Convert an instance of TokenGenerateAccessResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

